{"version":3,"sources":["../src/exporter.js"],"names":["dialog","remote","exportAll","pathArrayToSave","showOpenDialog","title","properties","pathToSave","books","inkdrop","store","getState","tree","reduce","promise","book","then","exportBook","Promise","resolve","logger","info","notifications","addInfo","detail","dismissable","e","error","addError","message","exportSingleNote","editingNote","showSaveDialog","defaultPath","filters","name","extensions","destDir","path","dirname","fileName","basename","exportNote","parentDir","db","main","dataStore","getLocalDB","dirName","replacement","join","docs","notes","findInBook","_id","limit","fs","mkdirSync","i","length","children","childBook","note","body","datestr","createdAt","format","substr","filePath","writeFileSync","touch","sync","time","Date","updatedAt"],"mappings":"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","sourcesContent":["import { remote } from 'electron'\nimport path from 'path'\nimport sanitize from 'sanitize-filename'\nimport fs from 'fs'\nimport touch from 'touch'\nimport moment from 'moment'\nimport { logger } from 'inkdrop'\nimport { replaceImages } from 'inkdrop-export-utils'\nconst { dialog } = remote\n\nexport async function exportAll() {\n  const pathArrayToSave = dialog.showOpenDialog({\n    title: 'Select a directory to export all notes',\n    properties: ['openDirectory', 'createDirectory']\n  })\n  if (pathArrayToSave) {\n    const [pathToSave] = pathArrayToSave\n    const books = inkdrop.store.getState().books.tree\n    try {\n      await books.reduce((promise, book) => {\n        return promise.then(() => exportBook(pathToSave, book))\n      }, Promise.resolve())\n      logger.info('Finished exporting all notes')\n      inkdrop.notifications.addInfo('Finished exporting all notes', {\n        detail: 'Directory: ' + pathToSave,\n        dismissable: true\n      })\n    } catch (e) {\n      logger.error('Failed to export:', e)\n      inkdrop.notifications.addError('Failed to export', {\n        detail: e.message,\n        dismissable: true\n      })\n    }\n  }\n}\n\nexport async function exportSingleNote() {\n  const { editingNote } = inkdrop.store.getState()\n  const pathToSave = dialog.showSaveDialog({\n    title: 'Save Markdown File',\n    defaultPath: `${editingNote.title}.md`,\n    filters: [{ name: 'Markdown Files', extensions: ['md'] }]\n  })\n  if (pathToSave) {\n    try {\n      const destDir = path.dirname(pathToSave)\n      const fileName = path.basename(pathToSave)\n      await exportNote(editingNote, destDir, fileName)\n    } catch (e) {\n      logger.error('Failed to export editing note:', e, editingNote)\n      inkdrop.notifications.addError('Failed to export editing note', {\n        detail: e.message,\n        dismissable: true\n      })\n    }\n  }\n}\n\nexport async function exportBook(parentDir, book) {\n  const db = inkdrop.main.dataStore.getLocalDB()\n  const dirName = sanitize(book.name, { replacement: '-' })\n  const pathToSave = path.join(parentDir, dirName)\n  const { docs: notes } = await db.notes.findInBook(book._id, {\n    limit: false\n  })\n\n  fs.mkdirSync(pathToSave)\n  for (let i = 0; i < notes.length; ++i) {\n    await exportNote(notes[i], pathToSave)\n  }\n\n  if (book.children) {\n    await book.children.reduce((promise, childBook) => {\n      return promise.then(() => exportBook(pathToSave, childBook))\n    }, Promise.resolve())\n  }\n}\n\nexport async function exportNote(note, pathToSave, fileName) {\n  if (note.body) {\n    const datestr = moment(note.createdAt).format('YYYYMMDD')\n    fileName =\n      fileName ||\n      sanitize(datestr + '-' + note.title + '-' + note._id.substr(5)) + '.md'\n    const filePath = path.join(pathToSave, fileName)\n    let body = '# ' + note.title + '\\n\\n' + note.body\n    body = await replaceImages(body, pathToSave)\n\n    fs.writeFileSync(filePath, body)\n    touch.sync(filePath, { time: new Date(note.updatedAt) })\n  }\n}\n"],"file":"exporter.js"}